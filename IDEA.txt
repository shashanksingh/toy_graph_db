1. Read a Graph - by database name > table name
2. Create a Graph with table_name
3. Call a functinality on graph like Undirected.is_tree()



Service Defination:

service ToyGraphDB {

  rpc readGraph (ToyGraphDBRequest) returns (ToyGraphDBResponse) {}

  rpc createGraph (ToyGraphDBRequest) returns (ToyGraphDBResponse) {}
  
  rpc CallFunctionalityInGraph (ToyGraphDBRequest) returns (ToyGraphDBResponse) {}
}

// The request message containing the user's name.
message ToyGraphDBRequest {
  string type = 1;
  dag dag = 2;
  directed directed = 3;
  graph graph = 4;
  grid grid = 5;
  tree tree = 6;
  trie trie = 7;
  undirected undirected = 8;
  string message = 9;
  string database = 10;
  string table = 11;
}

message dag {}
message directed {}
message graph {}
message grid {}
message tree {}
message trie {}
message undirected {}

// The response message containing the greetings
message ToyGraphDBResponse {
  status = 2;
  Error message = 3;
  Success message = 4;
}

message Error {
  string code = 3;
  string message = 4;
}

message Success {
  string code = 3;
  string message = 4;
}
