syntax = "proto3";

service ToyGraphDB {

  rpc read_graph (ToyGraphDBRequest) returns (ToyGraphDBResponse) {} // Obtains the graph in question

  rpc create_graph (ToyGraphDBRequest) returns (ToyGraphDBResponse) {} // create a graph based on params

  rpc call_functionality_in_graph (ToyGraphDBRequest) returns (ToyGraphDBResponse) {} // Calls functions on the graph in question
}

message ToyGraphDBRequest {
  enum type_of_graph {
      GRAPH = 0;
      DAG = 1;
      DIRECTED = 2;
      GRID = 3;
      TREE = 4;
      TRIE = 5;
      UNDIRECTED = 6;
  }
  type_of_graph type  = 1;
  dag dag = 2;
  directed directed = 3;
  graph graph = 4;
  grid grid = 5;
  tree tree = 6;
  trie trie = 7;
  undirected undirected = 8;
  string message = 9;
  string database = 10;
  string table = 11;
}

//toy graph db graph primites
message dag {}
message directed {}
message graph {}
message grid {
  list_of_list_of_integer grid=1;
}
message tree {}
message trie {}
message undirected {}

// The response message containing the graph data
message ToyGraphDBResponse {
  status status = 1;
  Error error_message = 2;
  Success success_message = 3;
}

message Error {
  string code = 1;
  string message = 2;
}

message Success {
  string code = 1;
  string message = 2;
}

message status {
    enum status {
        ALL_GOOD=0;
        EVERYTHING_IS_FINE=1;
    }
}

//input types for graph db primitives
message list_of_integer {
  repeated uint32 grid=1;
}
message list_of_list_of_integer {
  repeated list_of_integer list=1;
}
