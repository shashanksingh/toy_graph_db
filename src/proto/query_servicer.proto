syntax = "proto3";

service ToyGraphDB {

  rpc ping (Empty) returns (Pong) {} // Obtains the graph in question

  rpc read_graph (ToyGraphDBRequest) returns (ToyGraphDBResponse) {} // Obtains the graph in question

  rpc create_graph (ToyGraphDBRequest) returns (ToyGraphDBResponse) {} // create a graph based on params

  rpc call_functionality_in_graph (ToyGraphDBRequest) returns (ToyGraphDBResponse) {} // Calls functions on the graph in question
}


message Empty{}


message Pong {
  string message = 1;
}

message ToyGraphDBRequest {
  Type_of_graphs type  = 1;
  dag dag = 2;
  directed directed = 3;
  graph graph = 4;
  grid grid = 5;
  tree tree = 6;
  trie trie = 7;
  undirected undirected = 8;
  string message = 9;
  string database = 10;
  string table = 11;
}

//toy graph db graph primites
message dag {}
message directed {}
message graph {}
message grid {
  List_of_list_of_integer data=1;
}
message tree {}
message trie {}
message undirected {}

// The response message containing the graph data
message ToyGraphDBResponse {
  Status status = 1;
  Error error_message = 2;
  Success success_message = 3;
}

message Error {
  enum Code {
    FAILED= 0;
  }
  Code code_number = 1;
  string message = 2;
}

message Success {
  enum Code {
    ALL_GOOD= 0;
  }
  Code code_number = 1;
  string message = 2;
}

//enums
enum Status {
    ALL_GOOD=0;
    EVERYTHING_IS_FINE=1;
    COOL_YOUR_JETS=2;
    SOMETHING_WENT_WRONG=3;
    QUERY_IS_INCORRECT=4;
}

enum Type_of_graphs {
    GRAPH = 0;
    DAG = 1;
    DIRECTED = 2;
    GRID = 3;
    TREE = 4;
    TRIE = 5;
    UNDIRECTED = 6;
    INVALID = 7;
}

//input types for graph db primitives
message List_of_integer {
  repeated uint32 data=1;
}
message List_of_list_of_integer {
  repeated List_of_integer data=1;
}
